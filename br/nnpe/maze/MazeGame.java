package br.nnpe.maze;

import br.nnpe.maze.client.LinhaJogadorCliente;
import br.nnpe.maze.mazegen.MazeGen;
import br.nnpe.maze.server.LinhaServidor;
import br.nnpe.maze.server.ProtocoloDeMenssagens;

import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;

import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;

/**
 *
 * @author sobreira Created on 10 de Outubro de 2003, 16:57
 */
public class MazeGame extends javax.swing.JFrame {
	private boolean fimJogo;
	private Thread mover;
	private LinhaServidor servidor;
	private LinhaJogadorCliente jog;
	private String direcaoJagadaApplet = "";

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.ButtonGroup buttonGroup2;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
	private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
	private javax.swing.JButton jButton1;
	private javax.swing.JMenu jMenuSobre;
	private javax.swing.JMenu jMenu2;
	private javax.swing.JMenu jMenu3;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JMenuItem jMenuItem1;
	private javax.swing.JMenuItem jMenuItem2;
	private javax.swing.JMenuItem jMenuItem3;
	private javax.swing.JMenuItem jMenuItem4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JPanel mazePanel;

	/** Creates new form Memoria */
	public MazeGame() {
		initComponents();
	}

	public boolean isFocusable() {
		return true;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() { // GEN-BEGIN:initComponents
		jPanel1 = new javax.swing.JPanel();
		mazePanel = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jPanel2 = new javax.swing.JPanel();
		jTextField1 = new javax.swing.JTextField();
		jButton1 = new javax.swing.JButton();
		jMenuBar1 = new javax.swing.JMenuBar();
		jMenuSobre = new javax.swing.JMenu();
		jMenuItem3 = new javax.swing.JMenuItem();
		jMenu2 = new javax.swing.JMenu();
		jMenuItem2 = new javax.swing.JMenuItem();
		jMenuItem4 = new javax.swing.JMenuItem();
		jMenu3 = new javax.swing.JMenu();
		jMenuItem1 = new javax.swing.JMenuItem();
		jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
		jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
		jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
		buttonGroup2 = new javax.swing.ButtonGroup();
		jSeparator1 = new javax.swing.JSeparator();
		setTitle("Maze Game");

		addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
				int keyCode = e.getKeyCode();

				if (keyCode == KeyEvent.VK_LEFT) {
					jog.setJogar_Direcao(ProtocoloDeMenssagens.MOVER_ESQUERDA);
				} else if (keyCode == KeyEvent.VK_RIGHT) {
					jog.setJogar_Direcao(ProtocoloDeMenssagens.MOVER_DIREITA);
				} else if (keyCode == KeyEvent.VK_UP) {
					jog.setJogar_Direcao(ProtocoloDeMenssagens.MOVER_CIMA);
				} else if (keyCode == KeyEvent.VK_DOWN) {
					jog.setJogar_Direcao(ProtocoloDeMenssagens.MOVER_BAIXO);
				} else if (keyCode == KeyEvent.VK_0) {
					System.out.println("teste");
				}
			}

			public void keyReleased(KeyEvent e) {
			}

			public void keyTyped(KeyEvent e) {
			}
		});

		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				try {
					if ((jog != null) && (jog.getCon() != null) && jog.getCon().isConnected()) {
						jog.deconectar();
					}

					exitForm(evt);
				} catch (Exception e) {
				}
			}
		});

		jPanel1.setLayout(new java.awt.BorderLayout());

		mazePanel.setLayout(new AbsoluteLayout());

		mazePanel.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				MazeGame.this.requestFocus();
			}
		});

		jPanel1.add(mazePanel, java.awt.BorderLayout.CENTER);

		jTextArea1.setColumns(15);
		jTextArea1.setEditable(false);
		jTextArea1.setRows(4);
		jScrollPane1.setViewportView(jTextArea1);

		jPanel1.add(jScrollPane1, java.awt.BorderLayout.SOUTH);

		jTextField1.setColumns(20);
		jPanel2.add(jTextField1);

		jButton1.setText("Enviar Msg");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jPanel2.add(jButton1);

		jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

		getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

		JMenu menuApplet = new JMenu("Vers√£o offline");
		JMenuItem menuItemDFS = new JMenuItem("DFS");
		menuItemDFS.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				iniciarApplet(MazeGen.MazeDFS_ALGORTHIM);
			}
		});
		menuApplet.add(menuItemDFS);

		JMenuItem menuItemMazeKruskal = new JMenuItem("MazeKruskal");
		menuItemMazeKruskal.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				iniciarApplet(MazeGen.MazeKruskal_ALGORTHIM);
			}
		});
		menuApplet.add(menuItemMazeKruskal);

		JMenuItem menuItemMazePrim = new JMenuItem("MazePrim");
		menuItemMazePrim.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				iniciarApplet(MazeGen.MazePrim_ALGORTHIM);
			}
		});
		menuApplet.add(menuItemMazePrim);
		jMenuBar1.add(menuApplet);

		jMenuItem3.setText("Conectar");
		jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem3ActionPerformed(evt);
			}
		});

		jMenu2.add(jMenuItem3);

		jMenu2.setText("Servidor");
		jMenu2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenu2ActionPerformed(evt);
			}
		});

		jMenuItem2.setText("Iniciar Servidor");
		jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem2ActionPerformed(evt);
			}
		});

		jMenu2.add(jMenuItem2);

		jMenuItem4.setText("Iniciar Jogo");
		jMenuItem4.setEnabled(false);
		jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jMenuItem4ActionPerformed(evt);
			}
		});

		jMenu2.add(jMenuItem4);

		jMenuBar1.add(jMenu2);

		jMenu3.add(jMenuItem1);

		jMenu2.add(jSeparator1);

		jMenu3.setText("Algoritimo");
		jRadioButtonMenuItem1.setText("DFS");
		buttonGroup2.add(jRadioButtonMenuItem1);
		jRadioButtonMenuItem1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LinhaServidor.setMazeALGORTHIM(MazeGen.MazeDFS_ALGORTHIM);
			}
		});

		jMenu3.add(jRadioButtonMenuItem1);

		jRadioButtonMenuItem2.setText("MazeKruskal");
		buttonGroup2.add(jRadioButtonMenuItem2);
		jRadioButtonMenuItem2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LinhaServidor.setMazeALGORTHIM(MazeGen.MazeKruskal_ALGORTHIM);
			}
		});

		jMenu3.add(jRadioButtonMenuItem2);

		jRadioButtonMenuItem3.setText("MazePrim");
		buttonGroup2.add(jRadioButtonMenuItem3);
		jRadioButtonMenuItem3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				LinhaServidor.setMazeALGORTHIM(MazeGen.MazePrim_ALGORTHIM);
			}
		});

		jMenu3.add(jRadioButtonMenuItem3);

		jMenuBar1.add(jMenu3);

		jMenuSobre.setText("Sobre");
		jMenuBar1.add(jMenuSobre);

		JMenuItem autor = new JMenuItem("Autor");
		jMenuSobre.add(autor);
		autor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String msg = "Feito por Paulo Sobreira \n" + "sowbreira@gmail.com \n"
						+ "https://sowbreira-26fe1.firebaseapp.com/\n Outubro de 2003 Maio de 2023";
				JOptionPane.showMessageDialog(MazeGame.this, msg, "Sobre", JOptionPane.INFORMATION_MESSAGE);
			}
		});
		setJMenuBar(jMenuBar1);

		pack();
	} // GEN-END:initComponents

	private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jMenuItem4ActionPerformed

		// Add your handling code here:
		servidor.setJogoIniciado(true);
	} // GEN-LAST:event_jMenuItem4ActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jButton1ActionPerformed

		// Add your handling code here:
		jog.enviaMsg(jTextField1.getText());
	} // GEN-LAST:event_jButton1ActionPerformed

	private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jMenuItem3ActionPerformed

		// Add your handling code here:
		try {
			String ip = javax.swing.JOptionPane.showInputDialog(this, "Entre com IP do Servidor");
			String porta = javax.swing.JOptionPane.showInputDialog(this, "Entre com o N√∫mero da Porta do Servidor");
			jog = new LinhaJogadorCliente(
					new java.net.Socket(java.net.InetAddress.getByName(ip), Integer.parseInt(porta)), jTextArea1);
			jog.setNome(javax.swing.JOptionPane.showInputDialog(this, "Entre com Seu Nome"));
			jog.setPainel(mazePanel);
			jog.setMainFrame(this);
			jog.start();
		} catch (Exception e) {
			System.out.println(e);
		}
	} // GEN-LAST:event_jMenuItem3ActionPerformed

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jMenuItem2ActionPerformed

		// Add your handling code here:
		jMenuItem4.setEnabled(true);
		servidor = new LinhaServidor(
				Integer.parseInt(
						javax.swing.JOptionPane.showInputDialog(this, "Entre com o N√∫mero da Porta do Servidor")),
				jTextArea1);
		servidor.start();
		jMenuItem2.setEnabled(false);
	} // GEN-LAST:event_jMenuItem2ActionPerformed

	private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jMenu2ActionPerformed

		// Add your handling code here:
	} // GEN-LAST:event_jMenu2ActionPerformed

	public void iniciarJogo() {
		mover = new Thread(new Runnable() {
			public void run() {
				while (!fimJogo) {
					if (jog.getJogar_Direcao().equals(ProtocoloDeMenssagens.MOVER_ESQUERDA)) {
						if (jog.getMazeGameObject().moveAt(jog.getPtAtual().x - 1, jog.getPtAtual().y)) {
							jog.getPtAtual().x--;
							jog.jogadaCliente();
						} else {
							jog.setJogar_Direcao("");
						}
					} else if (jog.getJogar_Direcao().equals(ProtocoloDeMenssagens.MOVER_DIREITA)) {
						if (jog.getMazeGameObject().moveAt(jog.getPtAtual().x + 1, jog.getPtAtual().y)) {
							jog.getPtAtual().x++;
							jog.jogadaCliente();
						} else {
							jog.setJogar_Direcao("");
						}
					} else if (jog.getJogar_Direcao().equals(ProtocoloDeMenssagens.MOVER_CIMA)) {
						if (jog.getMazeGameObject().moveAt(jog.getPtAtual().x, jog.getPtAtual().y - 1)) {
							jog.getPtAtual().y--;
							jog.jogadaCliente();
						} else {
							jog.setJogar_Direcao("");
						}
					} else if (jog.getJogar_Direcao().equals(ProtocoloDeMenssagens.MOVER_BAIXO)) {
						if (jog.getMazeGameObject().moveAt(jog.getPtAtual().x, jog.getPtAtual().y + 1)) {
							jog.getPtAtual().y++;
							jog.jogadaCliente();
						} else {
							jog.setJogar_Direcao("");
						}
					}

					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		});
		mover.start();
		this.requestFocus();
	}

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) { // GEN-FIRST:event_exitForm

		if (jog.getCon().isConnected()) {
			try {
				jog.getCon().close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		System.exit(0);
	} // GEN-LAST:event_exitForm

	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args) {
		MazeGame mg = new MazeGame();
		mg.setVisible(true);
	}

	// End of variables declaration//GEN-END:variables

	/**
	 * @return Returns the mover.
	 */
	public final Thread getMover() {
		return mover;
	}

	/**
	 * @return Returns the fimJogo.
	 */
	public boolean isFimJogo() {
		return fimJogo;
	}

	/**
	 * @param fimJogo The fimJogo to set.
	 */
	public void setFimJogo(boolean fimJogo) {
		this.fimJogo = fimJogo;
	}

	public void iniciarApplet(int algoritimo) {
		try {
			Object[] keys = this.getKeyListeners();

			for (int i = 0; i < keys.length; i++) {
				this.removeKeyListener((KeyListener) keys[i]);
			}
			mazePanel.removeAll();

			MazeGen mg = new MazeGen(550, 550, 45, 45);
			mg.generate(algoritimo);

			ImageIcon img = new ImageIcon(mg.getMazeCanvas().getBufferImage());
			BufferedImage srcBufferedImage = new BufferedImage(img.getIconWidth(), img.getIconHeight(),
					BufferedImage.TYPE_INT_ARGB);
			srcBufferedImage.getGraphics().drawImage(img.getImage(), 0, 0, null);

			final MazeGameObject mazeGameObject = new MazeGameObject(srcBufferedImage);
			JLabel mazeLabel = new JLabel();
			mazeLabel.setIcon(new ImageIcon(mazeGameObject.getImage()));

			mazeLabel.invalidate();
			mazePanel.invalidate();

			final Point ptAtual = new Point(mg.getStartPt().x, mg.getStartPt().y);
			final JLabel jogadorLabel = new JLabel("< vc");
			jogadorLabel.setForeground(Color.YELLOW);

			BufferedImage srcBufferedImage2 = new BufferedImage(14, 14, BufferedImage.TYPE_INT_ARGB);
			Graphics g = srcBufferedImage2.getGraphics();
			Color c = new Color(0.0f, 0.0f, 0.0f, 0.0f);
			Graphics2D g2 = (Graphics2D) g;
			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
			g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
			g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g2.setColor(c);
			g2.fillRect(0, 0, 14, 14);

			// g2.setColor(jogadorLabel.getForeground());
			g2.setColor(Color.BLUE);
			g2.fillRoundRect(0, 0, 10, 10, 15, 15);
			g2.dispose();
			jogadorLabel.setIcon(new ImageIcon(srcBufferedImage2));

			final int descontoY = 20;
			final int descontoX = 5;
			mazePanel.add(jogadorLabel, new AbsoluteConstraints(ptAtual.x - descontoX, ptAtual.y - descontoY, 70, 45));
			mazePanel.add(mazeLabel, new AbsoluteConstraints(0, 0, mazeGameObject.getImage().getWidth(),
					mazeGameObject.getImage().getHeight()));

			addKeyListener(new KeyListener() {
				public void keyPressed(KeyEvent e) {
					int keyCode = e.getKeyCode();

					if (keyCode == KeyEvent.VK_LEFT) {
						direcaoJagadaApplet = ProtocoloDeMenssagens.MOVER_ESQUERDA;
					} else if (keyCode == KeyEvent.VK_RIGHT) {
						direcaoJagadaApplet = ProtocoloDeMenssagens.MOVER_DIREITA;
					} else if (keyCode == KeyEvent.VK_UP) {
						direcaoJagadaApplet = ProtocoloDeMenssagens.MOVER_CIMA;
					} else if (keyCode == KeyEvent.VK_DOWN) {
						direcaoJagadaApplet = ProtocoloDeMenssagens.MOVER_BAIXO;
					} else if (keyCode == KeyEvent.VK_0) {
						System.out.println("teste");
					}
				}

				public void keyReleased(KeyEvent e) {
				}

				public void keyTyped(KeyEvent e) {
				}
			});
			fimJogo = false;

			mover = new Thread(new Runnable() {
				public void run() {
					while (!fimJogo) {
						if (mazeGameObject.endPoint(ptAtual.x, ptAtual.y)) {
							fimJogo = true;
						}

						if (direcaoJagadaApplet.equals(ProtocoloDeMenssagens.MOVER_ESQUERDA)) {
							if (mazeGameObject.moveAt(ptAtual.x - 1, ptAtual.y)) {
								ptAtual.x--;
							}
						} else if (direcaoJagadaApplet.equals(ProtocoloDeMenssagens.MOVER_DIREITA)) {
							if (mazeGameObject.moveAt(ptAtual.x + 1, ptAtual.y)) {
								ptAtual.x++;
							}
						} else if (direcaoJagadaApplet.equals(ProtocoloDeMenssagens.MOVER_CIMA)) {
							if (mazeGameObject.moveAt(ptAtual.x, ptAtual.y - 1)) {
								ptAtual.y--;
							}
						} else if (direcaoJagadaApplet.equals(ProtocoloDeMenssagens.MOVER_BAIXO)) {
							if (mazeGameObject.moveAt(ptAtual.x, ptAtual.y + 1)) {
								ptAtual.y++;
							}
						}

						jogadorLabel.setLocation(ptAtual.x - descontoX, ptAtual.y - descontoY);

						try {
							Thread.sleep(50);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			});
			pack();
			mover.start();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
}
